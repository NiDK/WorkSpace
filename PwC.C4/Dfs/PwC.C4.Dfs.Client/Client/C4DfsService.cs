//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using PwC.C4.Configuration.WcfSettings;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IC4DfsService")]
internal interface IC4DfsService
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/RetrieveRecord", ReplyAction = "http://tempuri.org/IC4DfsService/RetrieveRecordResponse")]
    System.Collections.Generic.Dictionary<string, object> RetrieveRecord(string appCode, string fileId, System.Collections.Generic.List<string> properties);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/RetrieveRecord", ReplyAction = "http://tempuri.org/IC4DfsService/RetrieveRecordResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> RetrieveRecordAsync(string appCode, string fileId, System.Collections.Generic.List<string> properties);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/StartInsert", ReplyAction = "http://tempuri.org/IC4DfsService/StartInsertResponse")]
    bool StartInsert(string appCode, string fileId, string uploader, System.Collections.Generic.Dictionary<string, object> properties);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/StartInsert", ReplyAction = "http://tempuri.org/IC4DfsService/StartInsertResponse")]
    System.Threading.Tasks.Task<bool> StartInsertAsync(string appCode, string fileId, string uploader, System.Collections.Generic.Dictionary<string, object> properties);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/FinishInsert", ReplyAction = "http://tempuri.org/IC4DfsService/FinishInsertResponse")]
    void FinishInsert(string appCode, string fileId, string dfsPath);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/FinishInsert", ReplyAction = "http://tempuri.org/IC4DfsService/FinishInsertResponse")]
    System.Threading.Tasks.Task FinishInsertAsync(string appCode, string fileId, string dfsPath);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/RemoveRecord", ReplyAction = "http://tempuri.org/IC4DfsService/RemoveRecordResponse")]
    void RemoveRecord(string appCode, string fileId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/RemoveRecord", ReplyAction = "http://tempuri.org/IC4DfsService/RemoveRecordResponse")]
    System.Threading.Tasks.Task RemoveRecordAsync(string appCode, string fileId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/GetDataRecords", ReplyAction = "http://tempuri.org/IC4DfsService/GetDataRecordsResponse")]
    GetDataRecordsResponse GetDataRecords(GetDataRecordsRequest request);

    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/GetDataRecords", ReplyAction = "http://tempuri.org/IC4DfsService/GetDataRecordsResponse")]
    System.Threading.Tasks.Task<GetDataRecordsResponse> GetDataRecordsAsync(GetDataRecordsRequest request);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/GetDfsPathById", ReplyAction = "http://tempuri.org/IC4DfsService/GetDfsPathByIdResponse")]
    string GetDfsPathById(string appCode, string fileId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/GetDfsPathById", ReplyAction = "http://tempuri.org/IC4DfsService/GetDfsPathByIdResponse")]
    System.Threading.Tasks.Task<string> GetDfsPathByIdAsync(string appCode, string fileId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/GetDfsPathBySize", ReplyAction = "http://tempuri.org/IC4DfsService/GetDfsPathBySizeResponse")]
    string GetDfsPathBySize(string appCode, string fileId, string size);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4DfsService/GetDfsPathBySize", ReplyAction = "http://tempuri.org/IC4DfsService/GetDfsPathBySizeResponse")]
    System.Threading.Tasks.Task<string> GetDfsPathBySizeAsync(string appCode, string fileId, string size);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "GetDataRecords", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
internal partial class GetDataRecordsRequest
{

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public string appCode;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public int pageIndex;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
    public int pageSize;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 3)]
    public string keyword;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 4)]
    public string keyspace;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 5)]
    public string staffId;

    public GetDataRecordsRequest()
    {
    }

    public GetDataRecordsRequest(string appCode, int pageIndex, int pageSize, string keyword, string keyspace, string staffId)
    {
        this.appCode = appCode;
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
        this.keyword = keyword;
        this.keyspace = keyspace;
        this.staffId = staffId;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "GetDataRecordsResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
internal partial class GetDataRecordsResponse
{

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, object>> GetDataRecordsResult;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public long totalCount;

    public GetDataRecordsResponse()
    {
    }

    public GetDataRecordsResponse(System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, object>> GetDataRecordsResult, long totalCount)
    {
        this.GetDataRecordsResult = GetDataRecordsResult;
        this.totalCount = totalCount;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
internal interface IC4DfsServiceChannel : IC4DfsService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
internal partial class C4DfsServiceClient : System.ServiceModel.ClientBase<IC4DfsService>, IC4DfsService
{
    static WcfSetting wcfSettings = WcfSettings.Instance.GetWcfSetting("C4DfsService");
    public C4DfsServiceClient() : this(wcfSettings.Binding, wcfSettings.Endpoint)
    {
    }

    public C4DfsServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public C4DfsServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public C4DfsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public C4DfsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public System.Collections.Generic.Dictionary<string, object> RetrieveRecord(string appCode, string fileId, System.Collections.Generic.List<string> properties)
    {
        return base.Channel.RetrieveRecord(appCode, fileId, properties);
    }

    public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> RetrieveRecordAsync(string appCode, string fileId, System.Collections.Generic.List<string> properties)
    {
        return base.Channel.RetrieveRecordAsync(appCode, fileId, properties);
    }

    public bool StartInsert(string appCode, string fileId, string uploader, System.Collections.Generic.Dictionary<string, object> properties)
    {
        return base.Channel.StartInsert(appCode, fileId, uploader, properties);
    }

    public System.Threading.Tasks.Task<bool> StartInsertAsync(string appCode, string fileId, string uploader, System.Collections.Generic.Dictionary<string, object> properties)
    {
        return base.Channel.StartInsertAsync(appCode, fileId, uploader, properties);
    }

    public void FinishInsert(string appCode, string fileId, string dfsPath)
    {
        base.Channel.FinishInsert(appCode, fileId, dfsPath);
    }

    public System.Threading.Tasks.Task FinishInsertAsync(string appCode, string fileId, string dfsPath)
    {
        return base.Channel.FinishInsertAsync(appCode, fileId, dfsPath);
    }

    public void RemoveRecord(string appCode, string fileId)
    {
        base.Channel.RemoveRecord(appCode, fileId);
    }

    public System.Threading.Tasks.Task RemoveRecordAsync(string appCode, string fileId)
    {
        return base.Channel.RemoveRecordAsync(appCode, fileId);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    GetDataRecordsResponse IC4DfsService.GetDataRecords(GetDataRecordsRequest request)
    {
        return base.Channel.GetDataRecords(request);
    }

    public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, object>> GetDataRecords(string appCode, int pageIndex, int pageSize, string keyword, string keyspace, string staffId, out long totalCount)
    {
        GetDataRecordsRequest inValue = new GetDataRecordsRequest();
        inValue.appCode = appCode;
        inValue.pageIndex = pageIndex;
        inValue.pageSize = pageSize;
        inValue.keyword = keyword;
        inValue.keyspace = keyspace;
        inValue.staffId = staffId;
        GetDataRecordsResponse retVal = ((IC4DfsService)(this)).GetDataRecords(inValue);
        totalCount = retVal.totalCount;
        return retVal.GetDataRecordsResult;
    }

    public System.Threading.Tasks.Task<GetDataRecordsResponse> GetDataRecordsAsync(GetDataRecordsRequest request)
    {
        return base.Channel.GetDataRecordsAsync(request);
    }

    public string GetDfsPathById(string appCode, string fileId)
    {
        return base.Channel.GetDfsPathById(appCode, fileId);
    }

    public System.Threading.Tasks.Task<string> GetDfsPathByIdAsync(string appCode, string fileId)
    {
        return base.Channel.GetDfsPathByIdAsync(appCode, fileId);
    }

    public string GetDfsPathBySize(string appCode, string fileId, string size)
    {
        return base.Channel.GetDfsPathBySize(appCode, fileId, size);
    }

    public System.Threading.Tasks.Task<string> GetDfsPathBySizeAsync(string appCode, string fileId, string size)
    {
        return base.Channel.GetDfsPathBySizeAsync(appCode, fileId, size);
    }
}
