//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using PwC.C4.Configuration.WcfSettings;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IC4CacheService")]
public interface IC4CacheService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IC4CacheService/Get", ReplyAction="http://tempuri.org/IC4CacheService/GetResponse")]
    string Get(string appcode, string key);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IC4CacheService/Get", ReplyAction="http://tempuri.org/IC4CacheService/GetResponse")]
    System.Threading.Tasks.Task<string> GetAsync(string appcode, string key);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IC4CacheService/Set", ReplyAction="http://tempuri.org/IC4CacheService/SetResponse")]
    bool Set(string appcode, string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IC4CacheService/Set", ReplyAction="http://tempuri.org/IC4CacheService/SetResponse")]
    System.Threading.Tasks.Task<bool> SetAsync(string appcode, string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IC4CacheService/DeleteKey", ReplyAction="http://tempuri.org/IC4CacheService/DeleteKeyResponse")]
    bool DeleteKey(string appcode, string key);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IC4CacheService/DeleteKey", ReplyAction="http://tempuri.org/IC4CacheService/DeleteKeyResponse")]
    System.Threading.Tasks.Task<bool> DeleteKeyAsync(string appcode, string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IC4CacheServiceChannel : IC4CacheService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class C4CacheServiceClient : System.ServiceModel.ClientBase<IC4CacheService>, IC4CacheService
{
    static WcfSetting wcfSettings = WcfSettings.Instance.GetWcfSetting("C4CacheService");
    public C4CacheServiceClient():this(wcfSettings.Binding, wcfSettings.Endpoint)
    {

    }

    public C4CacheServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public C4CacheServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public C4CacheServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public C4CacheServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string Get(string appcode, string key)
    {
        return base.Channel.Get(appcode, key);
    }
    
    public System.Threading.Tasks.Task<string> GetAsync(string appcode, string key)
    {
        return base.Channel.GetAsync(appcode, key);
    }
    
    public bool Set(string appcode, string key, string value)
    {
        return base.Channel.Set(appcode, key, value);
    }
    
    public System.Threading.Tasks.Task<bool> SetAsync(string appcode, string key, string value)
    {
        return base.Channel.SetAsync(appcode, key, value);
    }
    
    public bool DeleteKey(string appcode, string key)
    {
        return base.Channel.DeleteKey(appcode, key);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteKeyAsync(string appcode, string key)
    {
        return base.Channel.DeleteKeyAsync(appcode, key);
    }
}
