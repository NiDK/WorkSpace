//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using PwC.C4.Configuration.WcfSettings;

namespace PwC.C4.DataService.Model.Enum
{
    using System.Runtime.Serialization;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "MetadataLogType", Namespace = "http://schemas.datacontract.org/2004/07/PwC.C4.DataService.Model.Enum")]
    public enum MetadataLogType : int
    {

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Add = 0,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Edit = 1,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 2,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IC4LogService")]
public interface IC4LogService
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4LogService/Log_ForUserBehavior_Insert", ReplyAction = "http://tempuri.org/IC4LogService/Log_ForUserBehavior_InsertResponse")]
    void Log_ForUserBehavior_Insert(string appcode, string optionType, string optionId, string method, string userId, string description);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4LogService/Log_ForUserBehavior_Insert", ReplyAction = "http://tempuri.org/IC4LogService/Log_ForUserBehavior_InsertResponse")]
    System.Threading.Tasks.Task Log_ForUserBehavior_InsertAsync(string appcode, string optionType, string optionId, string method, string userId, string description);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4LogService/Log_ForException_Insert", ReplyAction = "http://tempuri.org/IC4LogService/Log_ForException_InsertResponse")]
    void Log_ForException_Insert(string appCode, string type, System.DateTime date, string staffId, string thread, string level, string message, string exp, string logger, int status);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4LogService/Log_ForException_Insert", ReplyAction = "http://tempuri.org/IC4LogService/Log_ForException_InsertResponse")]
    System.Threading.Tasks.Task Log_ForException_InsertAsync(string appCode, string type, System.DateTime date, string staffId, string thread, string level, string message, string exp, string logger, int status);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4LogService/Log_FortMetadata_Insert", ReplyAction = "http://tempuri.org/IC4LogService/Log_FortMetadata_InsertResponse")]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PwC.C4.DataService.Model.Enum.MetadataLogType))]
    void Log_FortMetadata_Insert(string appcode, string metadataobject, object dataId, PwC.C4.DataService.Model.Enum.MetadataLogType method, string json, string userId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IC4LogService/Log_FortMetadata_Insert", ReplyAction = "http://tempuri.org/IC4LogService/Log_FortMetadata_InsertResponse")]
    System.Threading.Tasks.Task Log_FortMetadata_InsertAsync(string appcode, string metadataobject, object dataId, PwC.C4.DataService.Model.Enum.MetadataLogType method, string json, string userId);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IC4LogServiceChannel : IC4LogService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class C4LogServiceClient : System.ServiceModel.ClientBase<IC4LogService>, IC4LogService
{

    static WcfSetting wcfSettings = WcfSettings.Instance.GetWcfSetting("C4LogService");
    public C4LogServiceClient() : this(wcfSettings.Binding, wcfSettings.Endpoint)
    {
    }

    public C4LogServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public C4LogServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public C4LogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public C4LogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public void Log_ForUserBehavior_Insert(string appcode, string optionType, string optionId, string method, string userId, string description)
    {
        base.Channel.Log_ForUserBehavior_Insert(appcode, optionType, optionId, method, userId, description);
    }

    public System.Threading.Tasks.Task Log_ForUserBehavior_InsertAsync(string appcode, string optionType, string optionId, string method, string userId, string description)
    {
        return base.Channel.Log_ForUserBehavior_InsertAsync(appcode, optionType, optionId, method, userId, description);
    }

    public void Log_ForException_Insert(string appCode, string type, System.DateTime date, string staffId, string thread, string level, string message, string exp, string logger, int status)
    {
        base.Channel.Log_ForException_Insert(appCode, type, date, staffId, thread, level, message, exp, logger, status);
    }

    public System.Threading.Tasks.Task Log_ForException_InsertAsync(string appCode, string type, System.DateTime date, string staffId, string thread, string level, string message, string exp, string logger, int status)
    {
        return base.Channel.Log_ForException_InsertAsync(appCode, type, date, staffId, thread, level, message, exp, logger, status);
    }

    public void Log_FortMetadata_Insert(string appcode, string metadataobject, object dataId, PwC.C4.DataService.Model.Enum.MetadataLogType method, string json, string userId)
    {
        base.Channel.Log_FortMetadata_Insert(appcode, metadataobject, dataId, method, json, userId);
    }

    public System.Threading.Tasks.Task Log_FortMetadata_InsertAsync(string appcode, string metadataobject, object dataId, PwC.C4.DataService.Model.Enum.MetadataLogType method, string json, string userId)
    {
        return base.Channel.Log_FortMetadata_InsertAsync(appcode, metadataobject, dataId, method, json, userId);
    }
}
